@import "./HotspotVariables.css";

.hotspot-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 10;
  /* Allow clicks to pass through by default, components inside will set pointer-events back to auto */
  pointer-events: none;
  touch-action: none;
}

/* Ensure SVG elements capture pointer events */
.hotspot-overlay svg,
.hotspot-overlay polygon,
.hotspot-pin,
.hotspot-marker {
  pointer-events: auto;
}

/* SVG contains the polygon hotspots */
.hotspot-svg {
  /* Position is set dynamically in the component to match the video exactly */
  pointer-events: none;
  overflow: visible;
}

/* Make polygon elements clickable */
.hotspot-polygon {
  fill: rgba(
    var(--hotspot-primary-color-rgb),
    var(--hotspot-fill-opacity-base)
  );
  stroke: rgba(
    var(--hotspot-primary-color-rgb),
    var(--hotspot-stroke-opacity-base)
  );
  stroke-width: var(--hotspot-stroke-width);
  pointer-events: all; /* Always keep clickable */
  cursor: pointer;
  opacity: var(--hotspot-normal-opacity);
  transition: opacity var(--hotspot-transition-duration)
      var(--hotspot-transition-easing),
    fill var(--hotspot-transition-duration) var(--hotspot-transition-easing),
    stroke var(--hotspot-transition-duration) var(--hotspot-transition-easing);
}

/* Only show hover effect in debug mode or when cursor hovers */
.hotspot-polygon:hover {
  opacity: var(--hotspot-hover-opacity);
}

/* Enhanced cursor feedback when hovering over invisible hotspots */
.hotspot-overlay svg {
  cursor: default;
}

/* Use this special rule to make transparent polygons change cursor on hover */
polygon.hotspot-polygon {
  cursor: pointer;
}

/* Show cursor pointer even when polygons are transparent */
.hotspot-svg:has(.hotspot-polygon:hover) {
  cursor: pointer;
}

/* Styles for normal mode (non-debug) */
/* In normal mode, make polygons invisible but still clickable */
.hotspot-svg:not(.debug-mode) .hotspot-polygon {
  fill: rgba(
    var(--hotspot-background-color-rgb),
    var(--hotspot-invisible-opacity)
  );
  stroke: rgba(
    var(--hotspot-background-color-rgb),
    var(--hotspot-invisible-opacity)
  );
  opacity: var(--hotspot-invisible-opacity); /* Invisible */
}

.hotspot-svg:not(.debug-mode) .hotspot-polygon:hover {
  opacity: var(
    --hotspot-hover-invisible-opacity
  ); /* Slight visibility on hover for better UX */
}

/* Primary hotspots (video sequence) */
.primary-polygon {
  fill: rgba(
    var(--hotspot-primary-color-rgb),
    var(--hotspot-fill-opacity-base)
  );
  stroke: rgba(
    var(--hotspot-primary-color-rgb),
    var(--hotspot-stroke-opacity-base)
  );
  stroke-width: var(--hotspot-stroke-width);
}

.primary-polygon:hover {
  fill: rgba(
    var(--hotspot-primary-color-rgb),
    var(--hotspot-fill-opacity-hover)
  );
  stroke: rgba(
    var(--hotspot-primary-color-rgb),
    var(--hotspot-stroke-opacity-hover)
  );
}

/* Secondary hotspots (info panel) */
.secondary-polygon {
  fill: rgba(
    var(--hotspot-secondary-color-rgb),
    var(--hotspot-fill-opacity-base)
  );
  stroke: rgba(
    var(--hotspot-secondary-color-rgb),
    var(--hotspot-stroke-opacity-base)
  );
  stroke-width: var(--hotspot-stroke-width);
}

.secondary-polygon:hover {
  fill: rgba(
    var(--hotspot-secondary-color-rgb),
    var(--hotspot-fill-opacity-hover)
  );
  stroke: rgba(
    var(--hotspot-secondary-color-rgb),
    var(--hotspot-stroke-opacity-hover)
  );
}

/* Map pins and hotspots */
.hotspot-wrapper {
  position: absolute;
  transform: translate(-50%, -50%);
  pointer-events: all;
  z-index: 5;
}

.map-pin-container {
  position: absolute;
  transform: translate(-50%, -50%);
  pointer-events: all;
  cursor: pointer;
  opacity: var(--hotspot-invisible-opacity); /* Hidden by default */
  transition: opacity var(--hotspot-transition-duration)
      var(--hotspot-transition-easing),
    transform var(--hotspot-transition-duration)
      var(--hotspot-transition-easing);
}

.map-pin-container:hover {
  transform: translate(-50%, -50%) scale(1.2);
}

/* Map pin image */
.map-pin-image {
  width: var(--hotspot-pin-size);
  height: var(--hotspot-pin-size);
  filter: drop-shadow(var(--hotspot-pin-shadow));
}
